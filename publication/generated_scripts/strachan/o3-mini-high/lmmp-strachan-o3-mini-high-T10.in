# ------------------------------------------------------------
# LAMMPS Script for 2D Lennard-Jones Drop Simulation
#
# This script simulates a 2D system of N = 100 Lennard-Jones
# particles interacting via a shifted LJ potential:
#
#   V(r) = 4*epsilon*[(sigma/r)^12 - (sigma/r)^6 
#           - (sigma/r_c)^12 + (sigma/r_c)^6]  for r < r_c,
#   V(r) = 0   for r >= r_c,
#
# with r_c = 3*sigma.
#
# The natural time unit is t0 = sqrt(sigma^2*m/(48*epsilon)),
# and the integration time step is chosen as dt = 0.0025*t0.
#
# The drop (of 100 atoms) is generated inside a circle with radius
# R = sqrt[(N/rho)/pi], so that the (original) periodic system would
# have density rho (in units 1/sigma^2). Four cases can be studied by
# setting (rho, E_desired) to:
#   (0.75, -1.1), (0.75, -0.55), (0.75, 0.8), (0.8, -0.3)
#
# Here, E_desired is a target energy (per drop) chosen by the user.
# (In a full study one would prepare the drop from a thermalized
# periodic system; here we mimic that by equilibrating with NVT.)
#
# Additionally, we use a compute/chunk (binning the drop in 10
# concentric circular shells) to monitor:
#   - the mean radial (expansion) velocity in each shell,
#   - the local temperature in each shell (as the velocity fluctuations
#     about the shell’s collective motion).
#
# Adjust the variables below to choose among parameter sets.
# ------------------------------------------------------------

clear
units           lj
dimension       2
boundary        f f f

# --- Simulation Parameters ---
variable N         equal 100              # number of particles
variable rho       equal 0.75             # density (choose 0.75 or 0.8)
variable E_desired equal -1.1             # target energy (in LJ units)
# NOTE: In a more elaborate script, one could adjust the initial
# temperature so that (kinetic + potential) ≈ E_desired.
# Here, we set a preliminary temperature T_init.
variable T_init    equal 0.5             

# --- Compute drop radius ---
# For a periodic system at density rho, the area per drop is A = N/rho.
# A circular drop has radius R = sqrt(A/pi).
variable area      equal ${N}/${rho}
variable R         equal sqrt(${area}/3.14159)

# --- Define simulation box ---
# To allow for expansion, we choose a box that is larger than the drop.
variable R_box     equal 3.0*${R}
region simbox      block -${R_box} ${R_box} -${R_box} ${R_box} -0.1 0.1
create_box 1 simbox

# --- Create the initial drop ---
# Define a circular region (centered at 0,0) with radius R.
region drop        circle 0.0 0.0 ${R}
# Place N atoms randomly in the drop region.
create_atoms 1 random ${N} 12345 drop

# --- Define Interatomic Potential ---
# Use the Lennard-Jones potential with a cutoff of 3.0 (in LJ units)
pair_style lj/cut 3.0
pair_modify shift yes
pair_coeff * * 1.0 1.0 3.0

mass 1 1.0

# --- Set the time step ---
# With t0 = sqrt( m*sigma^2/(48*epsilon) ) = sqrt(1/48) in LJ units,
# we set dt = 0.0025*t0.
variable dt equal 0.0025*sqrt(1.0/48.0)
timestep ${dt}

# --- Assign Initial Velocities ---
# Create a Maxwellian distribution at temperature T_init.
velocity all create ${T_init} 54321 dist gaussian
# Remove any net linear momentum.
fix momentum all momentum 1 linear 1 1 1

# --- Set Neighbor List ---
neighbor        0.3 bin
neigh_modify    delay 0 every 1 check yes

# --- Define Thermodynamic Output ---
compute myTemp all temp
thermo          100
thermo_style    custom step time temp pe ke etotal

# --- Equilibration (NVT) ---
# Run a short equilibration to “thermalize” the drop.
fix 1 all nvt temp ${T_init} ${T_init} 1.0
run 10000
unfix 1

# (Optional: one could now adjust velocities to bring the drop’s
# total energy closer to E_desired. For simplicity, we proceed.)

# --- Set Up Spatial (Radial) Analysis ---
# Define per-atom variables for the radial coordinate and radial velocity.
# (Assuming the drop’s center-of-mass remains near (0,0).)
variable r  atom sqrt(x*x+y*y)
variable vr atom (x*vx+y*vy)/sqrt(x*x+y*y)

# Create a “chunk” that bins atoms into 10 concentric shells (from 0 to R).
# (The axis of the cylinder is along z.)
compute chunk all chunk/atom bin/cylinder 0.0 0.0 0.0 0.0 ${R} 10 units box

# Compute the local temperature in each chunk.
# This subtracts the chunk’s average (streaming) velocity so that the
# computed temperature is due to fluctuations.
compute Tchunk all temp/chunk chunk

# Average the per-atom radial velocity in each chunk and write to file.
# The output file “radial_profile.txt” will contain (for each chunk)
# the time-averaged mean radial velocity.
fix radial all ave/chunk 100 10 1000 chunk v_vr file radial_profile.txt mode vector

# Also average the local (thermal) temperature in each chunk.
fix localT all ave/chunk 100 10 1000 chunk c_Tchunk file temperature_profile.txt mode vector

# --- Dump Atom Trajectories (for visualization) ---
dump 1 all custom 1000 dump.lammpstrj id type x y vx vy

# --- Production Run (NVE) ---
# Now run in NVE to follow the drop’s expansion and multifragmentation.
fix 2 all nve
run 50000

# End of simulation
