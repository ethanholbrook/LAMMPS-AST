# LAMMPS Input Script for 2D Lennard-Jones Drop Simulation
# -----------------------------------------------------------
# This script simulates a 2D system of 100 Lennard-Jones particles interacting
# via the shifted two-body potential:
#   V(r) = 4*epsilon*[(sigma/r)^12 - (sigma/r)^6 
#           - (sigma/r_c)^12 + (sigma/r_c)^6]    for r < r_c
#   V(r) = 0                                     for r >= r_c
#
# with r_c = 3.0*sigma. The time step is set to dt = 0.0025*t0, where 
#   t0 = sqrt(sigma^2*m/(48*epsilon)).
#
# The initial configuration is obtained by “cutting” a circular drop (centered at the origin)
# from a thermalized periodic system at a given density. The drop has N = 100 particles.
#
# To study multifragmentation one would later divide the drop into 10 concentric rings
# (centered at the drop’s center-of-mass) and compute, for each ring, the mean radial velocity
# (i.e. the collective expansion) and the temperature from the velocity fluctuations.
#
# The simulation can be run for different parameter sets by changing the following variables:
#   (rho, E_target) = (0.75, -1.1); (0.75, -0.55); (0.75, 0.8); (0.8, -0.3)
# -----------------------------------------------------------

# ----- Simulation Setup -----
dimension       2
boundary        p p f
units           lj
atom_style      atomic

# --- Set simulation parameters ---
variable        rho equal 0.75          # Density in 1/sigma^2 (change as needed)
variable        E_target equal -1.1      # Target total energy (in units of epsilon; adjust if desired)
variable        N equal 100              # Number of particles

# Calculate drop area and radius.
# (Area = N/rho, drop radius = sqrt(Area/pi))
variable        area equal ${N}/${rho}
variable        Rdrop equal sqrt(${area}/3.14159)

# Define a square simulation box that fully contains the drop.
# Here we set the box size to L = 2*Rdrop (centered at the origin)
variable        L equal 2.0*${Rdrop}
region          box block -${L}/2 ${L}/2 -${L}/2 ${L}/2 -0.5 0.5
create_box      1 box

# --- Create atoms ---
# First, create N atoms randomly distributed in the box.
create_atoms    1 random ${N} 12345 box

# Define the circular drop region centered at (0,0) with radius Rdrop.
region          drop circle 0.0 0.0 ${Rdrop}

# Create a group consisting of atoms inside the drop.
group           drop_atoms region drop

# Delete atoms that fall outside the circular drop (i.e. keep only the drop).
delete_atoms    group drop_atoms invert

# ----- Force Field Setup -----
# Set up the Lennard-Jones potential with cutoff 3.0 (sigma) and shift it so that V(r_c)=0.
pair_style      lj/cut 3.0
pair_modify     shift yes
pair_coeff      1 1 1.0 1.0 3.0

# ----- Initial Velocities -----
# Here we assign initial velocities from a Gaussian distribution.
# (The temperature used in the "velocity create" command does not automatically yield E_target.
#  To adjust the drop’s total energy, one common procedure is to run a 0-step,
#  compute the potential energy, then scale the velocities appropriately.)
velocity        all create 1.0 54321 mom yes rot no dist gaussian

# Example (optional) procedure to adjust kinetic energy:
# run 0
# variable U equal pe
# # Compute desired kinetic energy: KE_desired = E_target - (current potential energy)
# variable KE_desired equal ${E_target} - v_U
# variable KE_current equal ke
# variable scaleFactor equal sqrt(v_KE_desired/v_KE_current)
# velocity        all scale ${scaleFactor}

# ----- Integration Settings -----
timestep        0.0025
fix             1 all nve

# ----- Output Settings -----
thermo          100
thermo_style    custom step temp pe ke etotal

# Dump atom positions (every 100 steps) for later analysis (e.g., to compute radial velocities and temperatures in concentric rings).
dump            1 all atom 100 dump.lammpstrj

# (Note: Detailed on-the-fly analysis of the drop (e.g., dividing the drop into 10 concentric rings,
#  computing the mean radial velocity in each, and the corresponding temperature) can be performed
#  either via LAMMPS “compute chunk/atom” and “fix ave/chunk” commands or by post-processing the dump file.)

# ----- Simulation Run -----
# Optional equilibration (brief run to settle forces)
run             1000

# Production run
run             10000

# ----- End of Script -----
