# ---------------------------------------------
# LAMMPS script for a 2D Lennard-Jones system
# with truncated-shifted potential (rc=3.0).
# Shows how to set up the system, time step,
# and run. Adapt as needed for each (rho, E).
# ---------------------------------------------

# We run in 2D
dimension         2

# Use LJ units (sigma=1, epsilon=1, mass=1)
units             lj

# Atom style: atomic
atom_style        atomic

# Boundary conditions: periodic in x,y, but 2D means no extent in z
# You can also use 'p p f' if desired, so that z is fixed.
boundary          p p f

# --- Define variables for time step ---
# t0 in LJ units is 1/sqrt(48) ~ 0.144337
# We want dt = 0.0025 * t0 ~ 3.608e-4
variable          dt equal 0.00036

# ---------------------------------------------
# Create a simulation box that will hold 100 atoms
# at roughly rho=0.75 or 0.8, for example.
# area needed = N / rho
# for rho=0.75 => area=133.33 => length ~ 11.55
# for rho=0.8 => area=125    => length ~ 11.18
# We'll just pick ~12x12 here and then pick a circular region inside it.
# ---------------------------------------------
region            box block 0 12 0 12 -0.1 0.1
create_box        1 box

# Option A: Directly create 100 atoms in a circular region
# (Works for a single test; for more precise initial conditions,
# you would read from a restart or data file created previously.)
region            drop circle 6 6 5  # center at (6,6), radius=5
create_atoms      1 region drop  # 100 random if region is large

# Optional: set masses (already 1 in LJ units, but explicit for clarity)
mass              1 1.0

# ---------------------------------------------
# Define the LJ pair potential with rc=3.0 (sigma=1)
# and shifted so potential=0 at cutoff
# ---------------------------------------------
pair_style        lj/cut 3.0
pair_modify       shift yes
pair_coeff        1 1 1.0 1.0 3.0

# neighbor and neigh_modify as usual
neighbor          0.3 bin
neigh_modify      every 1 delay 0 check yes

# ---------------------------------------------
# Initialize velocities 
# The target temperature (kinetic part) may need
# adjusting to match a desired total energy E.
# For demonstration, pick T = 0.5 (just an example).
# ---------------------------------------------
velocity          all create 0.5 12345 mom yes rot yes dist gaussian

# You can compute the total energy, then scale velocities
# up or down to match your desired E (especially if you want
# a specific potential + kinetic total = E).
# For fine control, you may do short runs and then re-scale.

# ---------------------------------------------
# Fix for NVE integration
# ---------------------------------------------
fix               1 all nve

# Enforce purely 2D motion (if you prefer).
# This fix is sometimes needed to zero z-forces and v_z if dimension=2.
# Otherwise, dimension 2 should already do it.
fix               2 all enforce2d

# Set the time step
timestep          ${dt}

# ---------------------------------------------
# Equilibration run or initial short run
# ---------------------------------------------
run               10000

# ---------------------------------------------
# At this point you have an equilibrated or
# partially equilibrated drop.  You can measure
# total E, T, etc.  Then proceed to the main run.
# ---------------------------------------------
# Example of continuing the run (the "production" part):
run               50000

# End of script
