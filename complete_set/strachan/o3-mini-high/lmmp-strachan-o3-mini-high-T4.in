# 2D Lennard-Jones Drop Simulation
# ---------------------------------
# This script simulates a two-dimensional system of N = 100 LJ particles
# interacting via a shifted LJ potential:
#
#    V(r) = 4*ε*[ (σ/r)^12 - (σ/r)^6 - (σ/rc)^12 + (σ/rc)^6 ]
#
# for r < rc, and V(r) = 0 for r >= rc, with rc = 3σ.
#
# The natural time unit is defined as t0 = sqrt(σ^2*m/(48*ε)),
# and we use a time step dt = 0.0025*t0.
#
# The initial drop is “cut” as a circle (of area = N/ρ) from a larger region.
# (In the original study, drops were cut from an equilibrated periodic system.)
#
# To run different parameter sets (see method description), change:
#    variable rho    (density, in 1/σ², e.g. 0.75 or 0.8)
#    variable E      (target total energy, given in units of ε;
#                     note: here E is provided for reference; the actual
#                     total energy depends on the initial kinetic energy)
#    variable T      (initial temperature used to set velocities)
#
# Example parameter sets:
#    (rho=0.75, E=-1.1), (rho=0.75, E=-0.55), (rho=0.75, E=0.8), (rho=0.8, E=-0.3)
#
# -------------------------------------------------------------------------

clear
units           lj
dimension       2
boundary        m m f      # free (shrink-wrapped) boundaries in x and y; fixed in z

# ----- Simulation Parameters -----
variable N    equal 100          # number of particles
variable rho  equal 0.75         # density (particles per unit area); change to 0.8 for other set
variable E    equal -1.1         # (target) total energy (in units of ε); for reference

# Compute drop area and radius from density: A = N/rho, radius = sqrt(A/π)
variable pi         equal 3.141592653589793
variable drop_area  equal ${N}/${rho}
variable drop_r     equal sqrt(${drop_area}/v_pi)
print "Drop radius = ${drop_r}"

# ----- Time Step Parameters -----
# Define t0 = sqrt(σ²*m/(48ε)) = sqrt(1/48) in LJ units (m = σ = ε = 1)
variable t0   equal sqrt(1.0/48.0)
variable dt   equal 0.0025*v_t0
print "Time step dt = ${dt}"

timestep ${dt}

# ----- Create Simulation Box and Atoms -----
# Make a box that is large enough to allow for expansion.
region simbox block -50 50 -50 50 -0.1 0.1 units box
create_box 1 simbox

# Define a circular region (centered at 0,0) of radius drop_r
region drop circle 0.0 0.0 ${drop_r} units box

# Create exactly N atoms randomly distributed within the drop region.
create_atoms 1 random ${N} 12345 drop

# ----- Define Interatomic Potential -----
mass 1 1.0
pair_style lj/cut 3.0
pair_modify shift yes       # shift potential to zero at cutoff
pair_coeff 1 1 1.0 1.0 3.0

# Enforce motion in the xy-plane
fix 1 all enforce2d

# ----- Set Initial Velocities -----
# Here we assign velocities from a Maxwell distribution.
# (In a full study, one might start from a thermalized configuration cut from a periodic system.)
# Note: Adjust the initial temperature T to help obtain the desired total energy.
variable T equal 0.2    # initial temperature; modify this to adjust total energy
velocity all create ${T} 12345 mom yes rot yes dist gaussian

# ----- Output Settings -----
thermo 1000
thermo_style custom step temp pe ke etotal

# Dump atom positions and velocities (x, y, vx, vy) for post-processing.
# You can use these trajectories to later compute the mean radial velocity in concentric rings.
dump 1 all custom 100 dump.lammpstrj id type x y vx vy

# ----- Integration -----
fix 2 all nve

# Run the simulation (adjust the number of steps as desired)
run 10000

# -------------------------------------------------------------------------
# End of Script
