# LAMMPS input script for a 2D Lennard-Jones drop simulation
# ------------------------------------------------------------
# This script simulates N = 100 LJ particles interacting via the shifted LJ potential:
#
#    V(r) = 4ε [ (σ/r)^12 - (σ/r)^6 - (σ/rc)^12 + (σ/rc)^6 ]    for r < rc
#         = 0                                                     for r ≥ rc
#
# with rc = 3σ.
#
# The time unit is defined as t0 = sqrt(σ²*m/(48*ε)) and the integration
# time step is dt = 0.0025*t0.
#
# The initial configuration is obtained by “cutting” a circular drop (of N = 100 atoms)
# from a thermalized 2D periodic LJ system. The drop’s radius is set so that the density
# equals ρ (i.e.  N/(πR²) = ρ ).
#
# After a short NVT equilibration, the velocities are rescaled so that the total energy
# per particle is E_target. (Note: total energy = [PE + KE] / N.)
#
# You may choose one of the following parameter sets (here set 1 is selected):
#
#   (1) ρ = 0.75,   E_target = -1.1
#   (2) ρ = 0.75,   E_target = -0.55
#   (3) ρ = 0.75,   E_target =  0.8
#   (4) ρ = 0.8,    E_target = -0.3
#
# To run a different case, change the values of the variables "rho" and "E_target" below.
# ------------------------------------------------------------

clear
units           lj
dimension       2
boundary        f f f            # free boundaries (2D simulation: z is a dummy)
atom_style      atomic

# ----- Choose simulation parameters --------------------------------------
variable rho      equal 0.75      # Density (in 1/σ²); use 0.8 for set (4)
variable E_target equal -1.1      # Target total energy per particle (in ε); change accordingly
variable N        equal 100       # Number of atoms
variable pi       equal 3.141592653589793

# Compute drop radius from: N/(πR²) = ρ  -->  R = sqrt(N/(πρ))
variable drop_radius equal sqrt(v_N/(v_pi*v_rho))

# Define integration time step: dt = 0.0025*t0 with t0 = sqrt(1/(48)) (for m = σ = ε = 1)
variable dt equal 0.0025/sqrt(48.0)
timestep        ${dt}

# ----- Create simulation box and initial drop -----------------------------
region          box block -20 20 -20 20 -0.1 0.1 units box
create_box      1 box

# Define a circular region (drop) centered at (0,0) with the computed radius
region          drop circle 0.0 0.0 ${drop_radius} units box

# Create N atoms randomly within the drop region
create_atoms    1 random ${N} 12345 drop

# ----- Define Lennard-Jones interactions ----------------------------------
# Use the LJ potential with cutoff = 3σ and shift it so V(rc) = 0.
pair_style      lj/cut 3.0
pair_modify     shift yes
pair_coeff      * * 1.0 1.0 3.0   # Here: ε = 1.0, σ = 1.0, rc = 3.0

# Set the atomic mass (m = 1.0)
mass            1 1.0

# ----- Assign initial velocities --------------------------------------------
# Start with a Maxwell-Boltzmann distribution at temperature T_init.
# (In 2D the average kinetic energy per atom is T_init.)
variable T_init equal 0.5   # Adjust T_init as needed for each E_target case
velocity        all create ${T_init} 54321 mom yes rot yes dist gaussian

# ----- Equilibration with NVT -----------------------------------------------
fix             1 all nvt temp ${T_init} ${T_init} 1.0
run             1000
unfix           1

# ----- Rescale velocities to target the desired total energy --------------
# Total energy per particle = (PE + KE) / N.
# Here we rescale velocities so that:
#      K_target = N*E_target - (current potential energy)
# Compute current kinetic energy:
compute         myKE all ke
run             0    # run 0 steps to update computes

# Use the global thermodynamic variable "pe" for the potential energy.
variable        U equal pe
# Calculate the target total kinetic energy (for the whole system)
variable        KE_target equal (v_N*v_E_target - v_U)
# Get the current kinetic energy from the compute:
variable        currentKE equal c_myKE
# Scaling factor for velocities:
variable        scale equal sqrt(v_KE_target/v_currentKE)
velocity        all scale ${scale}

# Print energy info for verification (values printed to the LAMMPS log)
print           "After velocity scaling:"
print           "  Potential Energy (PE) = ${U}"
print           "  Kinetic Energy (KE) = ${currentKE}"
print           "  (Approx.) Total energy per particle = (PE+KE)/N"

# ----- Switch to energy-conserving NVE dynamics ----------------------------
fix             2 all nve

# ----- Dump data for post-processing ---------------------------------------
# The dump file (dump.lammpstrj) will contain atom IDs, types, positions (x,y), and velocities (vx,vy).
dump            1 all custom 100 dump.lammpstrj id type x y vx vy
dump_modify     1 sort id

# Set thermo output frequency and print PE, KE, and total energy
thermo          100
thermo_style    custom step pe ke etotal

# ----- Production run -------------------------------------------------------
run             10000
